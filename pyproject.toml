[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "consumer-choice-metamodel"
version = "0.1.0"
description = "Abstract base classes and interfaces for implementing the Consumer Choice Metamodel for agent-based consumer behavior simulation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SiLab-group", email = "contact@silab-group.org"},
    {name = "Amy Liffey"},
]
maintainers = [
    {name = "SiLab-group", email = "contact@silab-group.org"},
]
keywords = [
    "agent-based-modeling",
    "consumer-behavior",
    "simulation",
    "metamodel",
    "choice-modeling",
    "behavioral-economics"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]
requires-python = ">=3.7"
dependencies = [
    "typing-extensions>=4.0.0;python_version<'3.8'",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "pre-commit>=2.15",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.15",
]
simulation = [
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "networkx>=2.6",
    "matplotlib>=3.4.0",
    "scipy>=1.7.0",
]
all = [
    "consumer-choice-metamodel[dev,docs,simulation]"
]

[project.urls]
Homepage = "https://github.com/SiLab-group/cosumer_choice_metamodel"
Repository = "https://github.com/SiLab-group/cosumer_choice_metamodel.git"
Issues = "https://github.com/SiLab-group/cosumer_choice_metamodel/issues"
Documentation = "https://github.com/SiLab-group/cosumer_choice_metamodel#readme"

[tool.setuptools]
packages = ["consumer_choice_metamodel"]

[tool.setuptools.package-dir]
consumer_choice_metamodel = "consumer_choice_metamodel"

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["consumer_choice_metamodel"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=consumer_choice_metamodel",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["consumer_choice_metamodel"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401",
]

[project.entry-points."console_scripts"]
# Add console scripts if needed
# ccm-validate = "consumer_choice_metamodel.cli:validate"